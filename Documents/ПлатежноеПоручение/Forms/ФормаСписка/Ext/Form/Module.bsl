#Область ОбработчикиСобытийФормы

&НаСервере
Процедура Задолженность_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
КонецПроцедуры

&НаСервере
Процедура Задолженность_ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СвернутьРазвернутьПанель(СвернутьПанель);
	
КонецПроцедуры

&НаКлиенте
Процедура Задолженность_ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(ЭтотОбъект);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	НастройкаГруппировки = Новый Массив;
	СтрокаДляРасшифровки = Новый Структура;
	СтрокаДляРасшифровки.Вставить("Использование", 	Истина);
	СтрокаДляРасшифровки.Вставить("Поле", 			"Документ");
	СтрокаДляРасшифровки.Вставить("Представление", 	"Документ");
	СтрокаДляРасшифровки.Вставить("ТипГруппировки", 0);
	НастройкаГруппировки.Добавить(СтрокаДляРасшифровки);
	
	ДополнительныеСвойства.Вставить("Группировка", НастройкаГруппировки);
	
	НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, "Контрагент", ТекущиеДанные.Контрагент, ВидСравненияКомпоновкиДанных.Равно);
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки",          Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки",            2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗадолженностьПоставщикам" Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", "ЗадолженностьПоставщикам");
		ОткрытьФорму("Отчет.ЗадолженностьПоставщикам.Форма.ФормаОтчета", ПараметрыОтчета, ЭтотОбъект);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗадолженностьПокупателей" Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", "ЗадолженностьПокупателей");
		ОткрытьФорму("Отчет.ЗадолженностьПокупателей.Форма.ФормаОтчета", ПараметрыОтчета, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Задолженность_ДекорацияСвернутьНажатие(Элемент)
	
	СвернутьПанель = НЕ СвернутьПанель;
	СвернутьРазвернутьПанель(СвернутьПанель);
	
КонецПроцедуры

&НаКлиенте
Процедура Задолженность_ДекорацияРазвернутьНажатие(Элемент)
	
	СвернутьПанель = НЕ СвернутьПанель;
	СвернутьРазвернутьПанель(СвернутьПанель);
	
КонецПроцедуры

&НаКлиенте
Процедура Задолженность_СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриАктивизацииСтроки()
	
	Если СвернутьПанель Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазместитьДанныеКонтрагента(ТекущиеДанные.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура РазместитьДанныеКонтрагента(Знач Контрагент)
	
	ДанныеКонтрагента = ДанныеДляЗаполненияПоКонтрагенту(Контрагент);
	Элементы.ДекорацияНаименованиеПолное.Заголовок = ДанныеКонтрагента.НаименованиеПолное;
	Элементы.ДекорацияДолгНам.Заголовок = НадписьВзаиморасчетов(ДанныеКонтрагента.Дебиторка, "Дт");
	Элементы.ДекорацияДолгНаш.Заголовок = НадписьВзаиморасчетов(ДанныеКонтрагента.Кредиторка, "Кт");
	
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьПанель(СвернутьПанель)
	
	Если СвернутьПанель Тогда
		Элементы.ПанельИнформации.Видимость = Ложь;
		Элементы.ГруппаЗаглушка.Видимость   = Истина;
	Иначе
		Элементы.ПанельИнформации.Видимость = Истина;
		Элементы.ГруппаЗаглушка.Видимость   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДляЗаполненияПоКонтрагенту(Знач Контрагент)
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("НаименованиеПолное", "Выберете контрагента");
	ДанныеКонтрагента.Вставить("Дебиторка",          0);
	ДанныеКонтрагента.Вставить("Кредиторка",         0);
	
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат ДанныеКонтрагента;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокСчетовСПокупателями)
	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Дебиторка,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокСчетовСПоставщиками)
	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Кредиторка,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В (&СписокСчетов),
	|			&СубконтоКонтрагентДоговор,
	|				Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПокупателей)
	|					ТОГДА Остатки.Дебиторка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК Дебиторка,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПоставщиков)
	|					ТОГДА Остатки.Кредиторка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК Кредиторка
	|ИЗ
	|	Остатки КАК Остатки";
	
	СубконтоКонтрагентДоговор = Новый СписокЗначений;
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("СубконтоКонтрагентДоговор", СубконтоКонтрагентДоговор);
	Запрос.УстановитьПараметр("СписокСчетовСПокупателями", МониторРуководителя.СчетаРасчетовСКонтрагентами(1));
	Запрос.УстановитьПараметр("СписокСчетовСПоставщиками", МониторРуководителя.СчетаРасчетовСКонтрагентами(2));
	СписокСчетов = МониторРуководителя.СчетаРасчетовСКонтрагентами(1);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, МониторРуководителя.СчетаРасчетовСКонтрагентами(2), Истина);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("ВидыДоговоровПокупателей", БухгалтерскиеОтчеты.ВидыДоговоровПокупателей());
	Запрос.УстановитьПараметр("ВидыДоговоровПоставщиков", БухгалтерскиеОтчеты.ВидыДоговоровПоставщиков());
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница (КонецДня(ТекущаяДатаСеанса()), ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, Выборка);
		ДанныеКонтрагента.НаименованиеПолное = Контрагент.НаименованиеПолное;
	КонецЕсли;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

&НаСервереБезКонтекста
Функция НадписьВзаиморасчетов(Знач Сумма, Знач ДтКт)
	
	КрупныйШрифт = Новый Шрифт(,11);
	МелкийШрифт = Новый Шрифт(,8);
	
	КомпонентыФС = Новый Массив;
	Если ДтКт = "Кт" Тогда
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Мы должны'") + " ", КрупныйШрифт));
		СсылкаНаОтчет = "ЗадолженностьПоставщикам";
	Иначе
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Должен нам'") + " ", КрупныйШрифт));
		СсылкаНаОтчет = "ЗадолженностьПокупателей";
	КонецЕсли;
	
	СуммаСтрокой = Формат(Сумма, "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
	ПозицияРазделителя = СтрНайти(СуммаСтрокой, ",");
	КомпонентыЧисла = Новый Массив;
	КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Лев(СуммаСтрокой, ПозицияРазделителя), КрупныйШрифт));
	КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Сред(СуммаСтрокой, ПозицияРазделителя+1), МелкийШрифт));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , СсылкаНаОтчет));
	КомпонентыФС.Добавить(" " + Константы.ВалютаРегламентированногоУчета.Получить());
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС, , ЦветаСтиля.ТекстВторостепеннойНадписи);
	
КонецФункции

&НаКлиенте
Функция ПользовательскиеНастройкиДляРасшифровки(Форма)
	
	НачалоПериода = НачалоМесяца(Форма.ТекущаяДата);
	КонецПериода = Форма.ТекущаяДата;
	
	// Инициализация пользовательских настроек
	// Добавим в настройки все параметры которые могут использоваться в отчетах руководителю
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация",      Неопределено);
	ДополнительныеСвойства.Вставить("НачалоПериода",    НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода",     КонецПериода);
	ДополнительныеСвойства.Вставить("Период",           Форма.ТекущаяДата);
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

#КонецОбласти

